---
- name: Setup the system
  hosts: raspberrypi # Defined in inventory.yml
  vars:
    # 作成するデータベース
    db_name: accessdb
    # clone対象のリポジトリの配列
    repos:
      - { repo: 'https://github.com/su-its/ams-frontend.git', version: 'develop', dest: 'ams-frontend' }
      - { repo: 'https://github.com/su-its/ams-backend.git', version: 'develop', dest: 'ams-backend' }
      - { repo: 'https://github.com/su-its/rdr-bridge.git', version: 'main', dest: 'rdr-bridge' }
  vars_prompt:
    # DBのrootではないユーザーとして"normal@localhost"を作成するので
    # それ用のパスワードをプロンプトで設定させる
    - name: normal_pass
      prompt: What is password for normal user?

    #- name: host_ip
    #  prompt: What is pi's ip address(ipv4)?
  pre_tasks:
    # become: で(unix)rootになったときに$HOMEが/rootになってしまって辛いので
    # piユーザーの$HOMEを"pi_home"に保存しておく
    - name: Get ansble_user home directory
      ansible.builtin.shell:
        cmd: "getent passwd {{ ansible_ssh_user }} | cut -d: -f6"
      check_mode: no # --checkをつけて実行した時もこのタスクはスキップせずに実行する
      register: ansible_home_result
    - name: Set the fact for the other scripts to use
      set_fact: "pi_home={{ ansible_home_result.stdout }}"
  tasks:
    # nvmインストール用スクリプトのダウンロード
    - name: Download install script of nvm
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh
        dest: $HOME/
        mode: 0755

    # .nvm/ディレクトリの削除(無かったら何も起きない)
    - name: Delete .nvm/ dir (if exists) before create
      ansible.builtin.file:
        path: $HOME/.nvm/
        state: absent

    # nvmインストール用スクリプトの実行
    - name: Install nvm using the install script
      ansible.builtin.shell:
        cmd: ./install.sh
        chdir: $HOME/
      register: ressh

    # インストール結果の確認
    - debug: var=ressh

    # Node.js(Fermium)のインストール
    - name: Install Node.js lts version via nvm
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && nvm install --lts=Fermium
        chdir: $HOME/
      register: resnode

    # インストール結果の確認
    - debug: var=resnode

    # npmを最新版にアップデート(多分ここかその前で失敗する)
    - name: Update npm
      ansible.builtin.shell:
        #cmd: . $HOME/.nvm/nvm.sh && npm i -g npm@7.6.3
        cmd: . $HOME/.nvm/nvm.sh && nvm install-latest-npm

    # pm2のインストール
    - name: Install pm2 globally
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && npm i -g pm2@4.5.5
    - name: Activate pm2
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && pm2

    # 必要なリポジトリの取得
    - name: Clone repos from GitHub
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        version: "{{ item.version }}"
        clone: yes
        dest: "$HOME/ams-project/{{ item.dest }}/"
      loop: "{{ repos }}"

    # npm install
    - name: Do npm install
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && npm i
        chdir: "$HOME/ams-project/{{ item }}/"
      loop:
        - 'ams-frontend'
        - 'ams-backend'

    # MariaDBのインストール(apt経由)
    - name: Install MariaDB
      become: yes
      apt:
        name:
          mariadb-server
        update_cache: yes # do apt update before install

    # データベースを作成
    - name: Create database
      become: yes
      community.mysql.mysql_db:
        login_host: localhost
        login_password: '' # MariaDB rootのパスワードは設定してないので空欄でOK
        name: "{{ db_name }}"
        state: present

    # スキーマ定義ファイルを探す
    - name: Find table specifications
      ansible.builtin.find:
        file_type: file
        pathes: $HOME/ams-project/ams-backend/schema
        patterns: "create_table*.sql"
        recurse: no
      register: schemas

    # テーブルを作成
    - name: Create tables
      become: yes
      community.mysql.mysql_db:
        login_host: localhost
        login_password: ''
        name: "{{ db_name }}"
        state: import
        target: "{{ item.path }}"
      loop: "{{ schemas }}"

    # 一般ユーザー(rootではないユーザー)を"normal@localhost"として作成
    - name: Create normal user
      become: yes
      community.mysql.mysql_user:
        name: normal
        host: localhost
        password: "{{ normal_pass }}"
        priv: 'accessdb.*:DELETE,INSERT,SELECT,UPDATE' # 権限はこの4つだけ与える
        state: present

    # .envの生成
    - name: (frontend) cp .env_sample .env
      ansible.builtin.shell:
        cmd: cp .env_sample .env
        chdir: $HOME/ams-project/ams-frontend/
        creates: .env # 作成対象のファイル これがあるとすでに存在した場合に上書きされるのを防げる

    # .env中の"localhost"を実際のipに置き換える nuxtのプロキシ使うなら不要
    #- name: (frontend) edit .env
    #  ansible.builtin.shell:
    #    cmd: sed -e "s/localhost/{{ host_ip }}/"
    #    chdir: $HOME/ams-project/ams-frontend/
    #    creates: .env

    # pipライブラリのインストール
    - name: (bridge) Install pip libraries
      ansible.builtin.pip:
        executable: pip3
        requirements: requirements.txt
        chdir: $HOME/ams-project/rdr-bridge/

    # nfc関連のセットアップの下準備(実行するコマンドの抽出)
    - name: (bridge) Setup nfc (prepare)
      ansible.builtin.shell:
        cmd: python3 -m nfc 2>&1 | awk '/^\s+sudo/ {print $0}'
      register: nfc_result

    # nfc関連のセットアップ実行(抽出したコマンドを実行)
    - name: (bridge) Setup nfc
      become: yes
      ansible.builtin.shell:
        cmd: "{{ nfc_result.stdout }}"
      when: nfc_result is defined

    # pm2 start ecosystem.config.js
    - name: Do pm2 start
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && pm2 start ecosystem.config.js
        chdir: "$HOME/ams-project/{{ item.dest }}/"
      loop: "{{ repos }}"

    # pm2 save
    - name: Do pm2 save
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && pm2 save

    # pm2 startupの下準備(実行するコマンドの抽出)
    - name: Do pm2 startup (prepare)
      ansible.builtin.shell:
        cmd: . $HOME/.nvm/nvm.sh && pm2 startup 2>&1 | awk '/^sudo/ {print $0}'
      register: pm2_result

    # pm2 startup実行(抽出したコマンドの実行)
    - name: Do pm2
      become: yes
      ansible.builtin.shell:
        cmd: "{{ pm2_result.stdout }}"
      when: pm2_result is defined
